<style>

#main { 
    position: fixed; 
    top: 40%; 
 
 
.messages {
	display: flex;
	flex-direction: column;
	overflow: scroll;
	height: 90%;
	width: 100%;
	background-color: white;
	padding: 15px;
	margin: 15px;
	border-radius: 10px;
}
 
   
}
</style>

<script>

/***** Special thanks to Tariq Siddiqui of HTMLGoodies for this wonderfully written chatbot script.
       I learned a lot.  The original script can be found at
       https://www.htmlgoodies.com/javascript/basic-chatbot-in-javascript/ ***/

/*** This an array of arrays that contain possible trigger phrases from user input AND answers based on those triggers ***/
/*** utterances[0] will respond with answers[0] upon matching and so on ***/


const utterances = [
   ["how are you", "how is life", "how are things"], // 0
   ["who are you", "are you human", "are you bot", "are you human or bot"], // 1
   ["who created you", "who made you"], // 2
   ["what is nursing case manager", "what is nurse case manager", "what is nurse case management", "what is nursing case management", "what is case management", "what is your job"], // 3
   ["who makes referrals"], // 4
   ["what is role of case manager", "what is your role", "what do you do", "what does case manager do"], // 5
   ["what are goals", "what are outcomes"] // 6
];

const answers = [
	   ["Fine...how are you?", "Pretty well, how are you?", "Fantastic, how are you?"], // 0
           ["I am Nurse Betty Bot.", "I am part Nurse and part Robot", "I am the one who helps you get better and return to work ASAP if you've been injured on the job"], // 1
           ["Javascript", "God Almighty", "Betty Overman"], // 2
           ["Nursing case managers help you recover to as near pre-illness / pre-injury status as possible as soon as possible.", "The nursing case manager helps make sure you understand your medical treatment options to enable you to make informed decisions regarding your health care so you understand what your doctor recommends for you."], //3
           ["Patients can be referred to a case manager by private physicians, primary nurses, social workers, utilization managers/reviewers, discharge planners, nurse practitioners, physician assistants, physical therapists, nutritionists, third party payors, attorneys, and family members. "], // 4
           ["The role functions of the nursing case manager include care coordination, education, advocacy, resource management, and discharge planning.",
            "The case manager's role is the focal point of the interdisciplinary approach to your care to eliminate the feelings of isolation, territoriality, fragmentation, redundancy, duplication, lack of communication, and unexplained, unnecessary tests / procedures. "], // 5
           ["The American Nurses Association defines the goals of case management as the provision of quality health care along a continuum with decreased fragmentation of care across health care settings, enhancement of the client's quality of life with efficient utilization of patient care resources and cost containment."] // 6
];

/*** For any other user input ***/
const alternatives = [
   ["Can you please clarify?"],
   ["I will have to email Betty at bmoverman0903@email.campbell.edu.  She will know how to address that."]
];




document.addEventListener("DOMContentLoaded", () => {
  document.querySelector("#input").addEventListener("keydown", function(e) {
    /*** Listen only for enter key ***/

    const inputField = document.getElementById("input");


    if (e.code === "Enter") {
        let input = inputField.value;
        inputField.value = "";
        output(input);
    }
  });
});


function output(input) {
   // remove anything other than words, digits, and spaces
   let text = input.toLowerCase().replace( /[^\w\s\d]/gi, "");
   

  /*** TO-DO: Additional Text Clean Up Routines Here ***/

  /*** remove indefinite articles, unnecessary phrases, and standardize
       speech to avoid having to account for different cases of the 
       same phrases of speech ***/

  text = text.replace(/\sa\s/g, " ")
             .replace(/whats/g, "what is")
             .replace(/ please/g, "")
             .replace(/please /g, "");


  

  let response;

  /**** if compare finds a matching utterance,
        get appropriate answer.  otherwise choose random one ****/

  if (compare(utterances, answers, text)) {
    response = compare(utterances, answers, text);
  }
  else {
    response = alternatives[Math.floor(Math.random() * alternatives.length)];
  }

  // update DOM
  addChatEntry(input, response);
  
}

function addChatEntry(input, response) {

   /**** Apppend user input to messages container first...
         Then the bot's response after a random delay ***/

   const messagesContainer = document.getElementById("messages");
   
   let userDiv = document.createElement("div");
   userDiv.id = "user";
   userDiv.className = "user response";
   userDiv.innerHTML = `${input}`;
   messagesContainer.appendChild(userDiv);

   let botDiv = document.createElement("div");
   let botText = document.createElement("span");
   botDiv.id = "bot";
   botDiv.className = "bot response";
   botText.innerText = "Typing...";
   botDiv.appendChild(botText);
   messagesContainer.appendChild(botDiv);


   setTimeout(() => { botText.innerText = `${response}` }, Math.random(3000, 8000)); // remember Math.random has inclusive, exclusive pattern. Will include 3000 up to 7999 milliseconds
}


/*** compare utterances array to answers array ***/
function compare(utterancesArray, answersArray, string) {
   let item;

   

   

   // outer array open
   for (let x = 0; x < utterancesArray.length; x++) {
     // inner array get
     for (let y = 0; y < utterancesArray[x].length; y++) {

        // x is the outter utterances array that houses different phrases
        // y is the inner utterances array that groups similar phrases together
 
        alert("search_key: " + string + " utterance: " + utterancesArray[x][y]);
 
        if(utterancesArray[x][y] === string) {
           /*** when a matching utterance is found,
           pull the corresponding outter answers array.
           Then randomly choose one of similar or appropriate response
           from the inner answers array ***/
 
           items = answersArray[x];
           item = items[Math.floor(Math.random() * items.length)];

        }
     }
   }
   return item;
}
</script>

<div id="messages">

</div>


<div id="main">
<div><input id="input" type="text" placeholder="Write something to Nurse Betty Bot..." size="100" autocomplete="off"  autofocus="true"/></div>
</div>
